%% DEMO_TRACKING% MDNET_RUN
% Main interface for MDNet tracker
%
% INPUT:
%   images  - 1xN cell of the paths to image sequences
%   region  - 1x4 vector of the initial bounding box [left,top,width,height]
%   net     - The path to a trained MDNet
%   display - True for displying the tracking result
%
% OUTPUT:
%   result - Nx4 matrix of the tracking result Nx[left,top,width,height]
%
% Hyeonseob Nam, 2015
% 

if(nargin<4), display = true; end

det = det(det(:,5) > 0 ,:);
iL = det(det(:,1)==1 & det(:,7) > 0 ,3:6);
initLoc=iL(1,:);
for i=2:length(iL(:,1))
    ov=1;
    for j=1:length(initLoc(:,1))
        if overlap_ratio(iL(i,:),initLoc(j,:))>0.4
            ov=0;
        end
    end
    if ov==1
        initLoc(end+1,:) = iL(i,:);
    end
end
%% Initialization
fprintf('Initialization...\n');

nFrames = length(images);
M = size(initLoc, 1);

img = imread(images{1});
if(size(img,3)==1), img = cat(3,img,img,img); end
justifi = ones(M, 1);
justifiF = ones(M, 1);
MoF = zeros(M,1);

targetLoc = initLoc;
result = zeros(M, nFrames, 4); result(:,1,:) = targetLoc;
%% Initialize displayots
%colormap = ['r','m','c','y','g','b','w','k'];
colormap = rand(M,3);
if display
    figure(2);
    set(gcf,'Position',[200 100 600 400],'MenuBar','none','ToolBar','none');
    
    hd = imshow(img,'initialmagnification','fit'); hold on;
    for m = 1:M
        rectangle('Position', targetLoc(m,:), 'EdgeColor', colormap(m,:), 'Linewidth', 1);
        text(targetLoc(m,1) + targetLoc(m,3)/2,targetLoc(m,2) + 12,num2str(m),'Color',colormap(m,:), 'FontSize', 18,'HorizontalAlignment', 'center' ); 
    end
    set(gca,'position',[0 0 1 1]);
    
    text(10,10,'1','Color','y', 'HorizontalAlignment', 'left', 'FontWeight','bold', 'FontSize', 30);
    hold off;
    drawnow;
end
[net_conv, net_fc_init, opts] = mdnet_init(img, net);

%% Train a bbox regressor
if(opts.bbreg)
    for m = 1:M
        pos_examples = gen_samples('uniform_aspect', targetLoc(m,:), opts.bbreg_nSamples*10, opts, 0.3, 10);
        r = overlap_ratio(pos_examples,targetLoc(m,:));
        pos_examples = pos_examples(r>0.6,:);
        pos_examples = pos_examples(randsample(end,min(opts.bbreg_nSamples,end)),:);
        feat_conv = mdnet_features_convX(net_conv, img, pos_examples, opts);

        X = permute(gather(feat_conv),[4,3,1,2]);
        X = X(:,:);
        bbox = pos_examples;
        bbox_gt = repmat(targetLoc(m,:),size(pos_examples,1),1);
        bbox_reg{m} = train_bbox_regressor(X, bbox, bbox_gt);
    end
end

%% Extract training examples
fprintf('  extract features...\n');

for m = 1:M
    % draw positive/negative samples
    pos_examples = gen_samples('gaussian', targetLoc(m,:), opts.nPos_init*2, opts, 0.1, 5);
    r = overlap_ratio(pos_examples,targetLoc(m,:));
    pos_examples = pos_examples(r>opts.posThr_init,:);
    pos_examples = pos_examples(randsample(end,min(opts.nPos_init,end)),:);

    neg_examples = [gen_samples('uniform', targetLoc(m,:), opts.nNeg_init, opts, 1, 10);...
        gen_samples('whole', targetLoc(m,:), opts.nNeg_init, opts)];
    r = overlap_ratio(neg_examples,targetLoc(m,:));
    neg_examples = neg_examples(r<opts.negThr_init,:);
    neg_examples = neg_examples(randsample(end,min(opts.nNeg_init,end)),:);

    examples = [pos_examples; neg_examples];
    pos_idx = 1:size(pos_examples,1);
    neg_idx = (1:size(neg_examples,1)) + size(pos_examples,1);

    % extract conv3 features
    feat_conv = mdnet_features_convX(net_conv, img, examples, opts);
    pos_data = feat_conv(:,:,:,pos_idx);
    neg_data = feat_conv(:,:,:,neg_idx);


    %% Learning CNN
    %fprintf('  training cnn...\n');
    net_fc{m} = mdnet_finetune_hnm(net_fc_init,pos_data,neg_data,opts,...
        'maxiter',opts.maxiter_init,'learningRate',opts.learningRate_init);
end



%% Prepare training data for online update
total_pos_data = cell(1,1,1,M,nFrames);
total_neg_data = cell(1,1,1,M,nFrames);
for m=1:M
    neg_examples = gen_samples('uniform', targetLoc(m,:), opts.nNeg_update*2, opts, 2, 5);
    r = overlap_ratio(neg_examples,targetLoc(m,:));
    neg_examples = neg_examples(r<opts.negThr_init,:);
    neg_examples = neg_examples(randsample(end,min(opts.nNeg_update,end)),:);

    examples = [pos_examples; neg_examples];
    pos_idx = 1:size(pos_examples,1);
    neg_idx = (1:size(neg_examples,1)) + size(pos_examples,1);

    feat_conv = mdnet_features_convX(net_conv, img, examples, opts);
    total_pos_data{1,1,1,m,1} = feat_conv(:,:,:,pos_idx);
    total_neg_data{1,1,1,m,1} = feat_conv(:,:,:,neg_idx);

    success_frames{m} = [1];
    trans_f(m) = opts.trans_f;
    scale_f(m) = opts.scale_f;
end

save('16-11-set3')

%
% Running the MDNet tracker on a given sequence.
%
% Hyeonseob Nam, 2015
%

clear;

conf = genConfig('mot','/MOT16/test/MOT16-07/');
% conf = genConfig('vot2015','ball1');

switch(conf.dataset)
    case 'otb'
        net = fullfile('models','mdnet_vot-otb.mat');
    case 'vot2014'
        net = fullfile('models','mdnet_otb-vot14.mat');
    case 'vot2015'
        net = fullfile('models','mdnet_otb-vot15.mat');
    case 'mot'
        net = fullfile('models','mdnet_vot-otb.mat');
end
%% define the initialization for multiple targets. 2 as an example here


pathSave = [conf.imgDir(1:end-4) 'trackingM_withDet/'];
detPath = fullfile(conf.imgDir(1:end-4),'det/det.txt');
det = importdata(detPath);
result = mdnet_run(conf.imgList, net, 1, pathSave,det);
save(['./dataset/MOT' conf.seqName 'res'])
%[p,n] = SampGen(conf.imgList, conf.gt, net, 1, pathSave);
%%result = mdnet_run_ori(conf.imgList, conf.gt, net, 1);